// @generated by genrecord.ts
package moe.nea.pcj.json;

import moe.nea.pcj.*;
import java.util.stream.*;

@SuppressWarnings("unused")
public class RecordJoiners {
	public static <T0, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			Tuple.Func1<O, T0> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple1.collect(new Tuple.Tuple1<>(arg0.dec(format, ops)))
				                   .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			Tuple.Func2<O, T0, T1> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple2.collect(new Tuple.Tuple2<>(arg0.dec(format, ops), arg1.dec(format, ops)))
				                   .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			Tuple.Func3<O, T0, T1, T2> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple3.collect(new Tuple.Tuple3<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops)))
				                   .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			Tuple.Func4<O, T0, T1, T2, T3> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple4.collect(new Tuple.Tuple4<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops)))
				                   .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			Tuple.Func5<O, T0, T1, T2, T3, T4> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple5.collect(new Tuple.Tuple5<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops)))
				                   .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, T5, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			RecordCodec<O, T5, Format> arg5,
			Tuple.Func6<O, T0, T1, T2, T3, T4, T5> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops), arg5.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple6.collect(new Tuple.Tuple6<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops), arg5.dec(format, ops)))
				                   .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, T5, T6, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			RecordCodec<O, T5, Format> arg5,
			RecordCodec<O, T6, Format> arg6,
			Tuple.Func7<O, T0, T1, T2, T3, T4, T5, T6> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops), arg5.enc(data, ops), arg6.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple7.collect(new Tuple.Tuple7<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops), arg5.dec(format, ops), arg6.dec(format, ops)))
				                   .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, T5, T6, T7, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			RecordCodec<O, T5, Format> arg5,
			RecordCodec<O, T6, Format> arg6,
			RecordCodec<O, T7, Format> arg7,
			Tuple.Func8<O, T0, T1, T2, T3, T4, T5, T6, T7> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops), arg5.enc(data, ops), arg6.enc(data, ops), arg7.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple8.collect(new Tuple.Tuple8<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops), arg5.dec(format, ops), arg6.dec(format, ops), arg7.dec(format, ops)))
				                   .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			RecordCodec<O, T5, Format> arg5,
			RecordCodec<O, T6, Format> arg6,
			RecordCodec<O, T7, Format> arg7,
			RecordCodec<O, T8, Format> arg8,
			Tuple.Func9<O, T0, T1, T2, T3, T4, T5, T6, T7, T8> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops), arg5.enc(data, ops), arg6.enc(data, ops), arg7.enc(data, ops), arg8.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple9.collect(new Tuple.Tuple9<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops), arg5.dec(format, ops), arg6.dec(format, ops), arg7.dec(format, ops), arg8.dec(format, ops)))
				                   .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			RecordCodec<O, T5, Format> arg5,
			RecordCodec<O, T6, Format> arg6,
			RecordCodec<O, T7, Format> arg7,
			RecordCodec<O, T8, Format> arg8,
			RecordCodec<O, T9, Format> arg9,
			Tuple.Func10<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops), arg5.enc(data, ops), arg6.enc(data, ops), arg7.enc(data, ops), arg8.enc(data, ops), arg9.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple10.collect(new Tuple.Tuple10<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops), arg5.dec(format, ops), arg6.dec(format, ops), arg7.dec(format, ops), arg8.dec(format, ops), arg9.dec(format, ops)))
				                    .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			RecordCodec<O, T5, Format> arg5,
			RecordCodec<O, T6, Format> arg6,
			RecordCodec<O, T7, Format> arg7,
			RecordCodec<O, T8, Format> arg8,
			RecordCodec<O, T9, Format> arg9,
			RecordCodec<O, T10, Format> arg10,
			Tuple.Func11<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops), arg5.enc(data, ops), arg6.enc(data, ops), arg7.enc(data, ops), arg8.enc(data, ops), arg9.enc(data, ops), arg10.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple11.collect(new Tuple.Tuple11<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops), arg5.dec(format, ops), arg6.dec(format, ops), arg7.dec(format, ops), arg8.dec(format, ops), arg9.dec(format, ops), arg10.dec(format, ops)))
				                    .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			RecordCodec<O, T5, Format> arg5,
			RecordCodec<O, T6, Format> arg6,
			RecordCodec<O, T7, Format> arg7,
			RecordCodec<O, T8, Format> arg8,
			RecordCodec<O, T9, Format> arg9,
			RecordCodec<O, T10, Format> arg10,
			RecordCodec<O, T11, Format> arg11,
			Tuple.Func12<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops), arg5.enc(data, ops), arg6.enc(data, ops), arg7.enc(data, ops), arg8.enc(data, ops), arg9.enc(data, ops), arg10.enc(data, ops), arg11.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple12.collect(new Tuple.Tuple12<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops), arg5.dec(format, ops), arg6.dec(format, ops), arg7.dec(format, ops), arg8.dec(format, ops), arg9.dec(format, ops), arg10.dec(format, ops), arg11.dec(format, ops)))
				                    .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			RecordCodec<O, T5, Format> arg5,
			RecordCodec<O, T6, Format> arg6,
			RecordCodec<O, T7, Format> arg7,
			RecordCodec<O, T8, Format> arg8,
			RecordCodec<O, T9, Format> arg9,
			RecordCodec<O, T10, Format> arg10,
			RecordCodec<O, T11, Format> arg11,
			RecordCodec<O, T12, Format> arg12,
			Tuple.Func13<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops), arg5.enc(data, ops), arg6.enc(data, ops), arg7.enc(data, ops), arg8.enc(data, ops), arg9.enc(data, ops), arg10.enc(data, ops), arg11.enc(data, ops), arg12.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple13.collect(new Tuple.Tuple13<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops), arg5.dec(format, ops), arg6.dec(format, ops), arg7.dec(format, ops), arg8.dec(format, ops), arg9.dec(format, ops), arg10.dec(format, ops), arg11.dec(format, ops), arg12.dec(format, ops)))
				                    .map(it -> it.applyTo(joiner));
			}
		};
	}
	public static <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, O, Format> MapCodec<O, Format> join(
			RecordCodec<O, T0, Format> arg0,
			RecordCodec<O, T1, Format> arg1,
			RecordCodec<O, T2, Format> arg2,
			RecordCodec<O, T3, Format> arg3,
			RecordCodec<O, T4, Format> arg4,
			RecordCodec<O, T5, Format> arg5,
			RecordCodec<O, T6, Format> arg6,
			RecordCodec<O, T7, Format> arg7,
			RecordCodec<O, T8, Format> arg8,
			RecordCodec<O, T9, Format> arg9,
			RecordCodec<O, T10, Format> arg10,
			RecordCodec<O, T11, Format> arg11,
			RecordCodec<O, T12, Format> arg12,
			RecordCodec<O, T13, Format> arg13,
			Tuple.Func14<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> joiner
	) {
		return new MapCodec<>() {
			@Override
			public Result<RecordBuilder<Format>, JsonLikeError> encode(O data, JsonLikeOperations<Format> ops) {
				return Stream.of(arg0.enc(data, ops), arg1.enc(data, ops), arg2.enc(data, ops), arg3.enc(data, ops), arg4.enc(data, ops), arg5.enc(data, ops), arg6.enc(data, ops), arg7.enc(data, ops), arg8.enc(data, ops), arg9.enc(data, ops), arg10.enc(data, ops), arg11.enc(data, ops), arg12.enc(data, ops), arg13.enc(data, ops))
				             .reduce(Result.ok(ops.createObject()), RecordCodec::merge);
			}
			@Override
			public Result<O, JsonLikeError> decode(RecordView<Format> format, JsonLikeOperations<Format> ops) {
				return Tuple.Tuple14.collect(new Tuple.Tuple14<>(arg0.dec(format, ops), arg1.dec(format, ops), arg2.dec(format, ops), arg3.dec(format, ops), arg4.dec(format, ops), arg5.dec(format, ops), arg6.dec(format, ops), arg7.dec(format, ops), arg8.dec(format, ops), arg9.dec(format, ops), arg10.dec(format, ops), arg11.dec(format, ops), arg12.dec(format, ops), arg13.dec(format, ops)))
				                    .map(it -> it.applyTo(joiner));
			}
		};
	}
}
